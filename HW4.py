# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
#
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
#
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
#
# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
#
# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание,
# что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# #### Например, в первом задании выводим целые числа, начиная с 3.
# При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие,
# при котором повторение элементов списка прекратится.
#
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, # начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

#1
# from sys import argv
# print(f'Employee salary = {int(argv[1]) * int(argv[2]) + int(argv[3])}')

#2
# from sys import argv
# new = argv[1:]
# result = [print(new[i+1]) for i in range(0, len(new)-1) if int(new[i]) < int(new[i+1])]

#3.1
# result = [print(i, end=', ') for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]

#3.2
# result = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
# print(result)

#4.1
# from sys import argv
# new = argv[1:]
# result = [print(el, end=' ') for el in new if new.count(el) == 1]

#4.2
# from sys import argv
# new = argv[1:]
# result = [el for el in new if new.count(el) == 1]
# print(result)

#5
# from functools import reduce
# midterm = [i for i in range(100, 1001, 2)]
# print(midterm)
# result = reduce(lambda x, y: x * y, midterm)
# print(result)

#6
# from sys import argv
# from itertools import count, cycle
#
# for el in count(int(argv[1])):
#     data = el
#     print(data, end=' | ')
#     if el > int(argv[2]) - 1:
#         break
#
# list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
# i = 0
# for el in cycle(list):
#     print(el, end=' ')
#     i += 1
#     if i > (len(list) - 1) * 2:
#         break

#7

n = int(input('enter number '))
p = n + 1
print(n)
data = [i for i in range(1, p)]


def fact(a):
    for i in a:
        yield i


res = 1
for el in fact(data):
    res = res * int(el)

print(f'{n}! = ', res)
